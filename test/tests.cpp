// Test definitions. Do NOT edit this file!

#include <tuple>

#define CATCH_CONFIG_MAIN // defines main() automatically
#include "catch_amalgamated.hpp"

#include "../Automovil.hpp" //implementations


TEST_CASE("Ex1", "[Probando constructor default]")
{
    Automovil a1;
    SECTION("Verificando sus atributos iniciales")
    {
        REQUIRE(a1.getKm()== 0);
        REQUIRE(a1.getLitrosActuales() == 10);
        REQUIRE(a1.getModelo()==2000);
    }
}

// =====================
// tests for exercise 2
// ---------------------

TEST_CASE("Ex2", "[Probando constructor con parametros]")
{
    Automovil cb1("Toyota", 2010, 5, 13.5, 40);
    SECTION("Verificando creacion con parametros")
    {
        REQUIRE(cb1.getMarca()=="Toyota");
        REQUIRE(cb1.getModelo()==2010);
        REQUIRE(cb1.getKm()==0);
        REQUIRE(cb1.getNumPasajeros()==5);
        REQUIRE(cb1.getRendimiento()==13.5);
        REQUIRE(cb1.getCapacidadTanque()==40);
    }
}

TEST_CASE("Ex3", "[Probando setters]")
{
    Automovil nueva;
    SECTION("Verificando cambios en los atributos")
    {
        nueva.setMarca("Nissan");
        nueva.setModelo(2020);
        nueva.setLitrosActuales(70);

        REQUIRE(nueva.getMarca() =="Nissan");
        REQUIRE(nueva.getModelo() == 2020);
        REQUIRE(nueva.getLitrosActuales() == 50);
    }
}

TEST_CASE("Ex4", "[Probando Imprimir]")
{
    Automovil cb1("Toyota", 2010, 5, 13.5, 40);
    SECTION("Mostrando en consola los datos de la cuenta")
    {
        cb1.imprimeAutomovil();
        REQUIRE(true);
    }
}

TEST_CASE("Ex5", "[Probando llenaTanque]")
{
    Automovil a1;
    SECTION("Llenando el tanque")
    {
        a1.llenaTanque();
        REQUIRE(a1.getLitrosActuales()==a1.getCapacidadTanque());
    }
}

TEST_CASE("Ex6", "[Probando calculaConsumo]")
{
    Automovil a1;
    SECTION("Calcula y no alcanza")
    {
        int gas = a1.calculaConsumo(150.5,2);
        REQUIRE(gas==-1);
        gas=a1.calculaConsumo(50.5,6);
        REQUIRE(gas==-1);
    }
}

TEST_CASE("Ex7", "[Probando calculaConsumo]")
{
    Automovil a1;
    Automovil a2("Toyota", 2010, 5, 15.5, 40);
    SECTION("Calcula y alcanza")
    {
        int gas = a1.calculaConsumo(100.5,2);
        REQUIRE(gas==9);
        int gas2=a2.calculaConsumo(50.5,5);
        REQUIRE(gas2==4);
    }
}

TEST_CASE("Ex8", "[Probando avanza]")
{
    Automovil a1;
    Automovil a2("Toyota", 2010, 5, 15.5, 40);
    SECTION("Avanza y alcanza")
    {
        a1.avanza(100.5,2);
        REQUIRE(a1.getLitrosActuales()==1);
        REQUIRE(a1.getKm()==100.5);
        a2.avanza(50.5,5);
        REQUIRE(a2.getLitrosActuales()==6);
        REQUIRE(a2.getKm()==50.5);
    }
}

TEST_CASE("Ex9", "[Probando avanza y no alcanza]")
{
    Automovil a1;
    Automovil a2("Toyota", 2010, 5, 15.5, 40);
    SECTION("Avanza y no alcanza")
    {
        a1.avanza(150.5,2);
        REQUIRE(a1.getLitrosActuales()==10);
        REQUIRE(a1.getKm()==0);
        a2.avanza(350.5,5);
        REQUIRE(a2.getLitrosActuales()==10);
        REQUIRE(a2.getKm()==0);
    }
}